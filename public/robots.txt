# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import "./SignUp.css"
import { useDispatch } from 'react-redux';
import { registerUser } from '../../../actions/signupAction';
import { useFormik } from 'formik';

interface User {
  name: string;
  email: string;
  password: string;
  confirmPassword: string;
  image: File | null;
  mobile: string;
}

const SignUp: React.FC = () => {
  const dispatch = useDispatch();

  const [user, setUser] = useState<User>({
    name: "",
    email: "",
    password: "",
    confirmPassword: "",
    image: null,
    mobile: "",
  });

  const formik = useFormik({
    initialValues: {
      name: '',
      email: '',
      password: '',
      confirmPassword: '',
      image: "",
      mobile: '',
    },
    validate: (values) => {
      const errors: Partial<User> = {};

      if (!values.name) {
        errors.name = 'Name is required';
      } else if (values.name.length < 15) {
        errors.name = 'Name should be at least 15 characters long';
      }

      if (!values.email) {
        errors.email = 'Email is required';
      } else if (!/^\S+@\S+\.\S+$/.test(values.email)) {
        errors.email = 'Invalid email';
      }

      if (!values.mobile) {
        errors.mobile = 'Mobile number is required';
      } else if (!/^[6-9]\d{9}$/.test(values.mobile)) {
        errors.mobile = 'Invalid mobile number';
      }

      if (!values.password) {
        errors.password = 'Password is required';
      }

      if (values.password !== values.confirmPassword) {
        errors.confirmPassword = 'Passwords must match';
      }

      // if (values.image && values.image.size > 2 * 1024 * 1024) {
      //   errors.image = 'File size should be less than 2MB';
      // }

      // if (
      //   values.image &&
      //   !['image/jpeg', 'image/png'].includes(values.image.type)
      // ) {
      //   errors.image = 'Invalid file type';
      // }

      return errors;
    },
    onSubmit: (values) => {
      dispatch(registerUser(values)); 
      setUser({
        name: '',
        email: '',
        password: '',
        confirmPassword: '',
        image: null,
        mobile: '',
      });
    },
  });


  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const { id, value, files } = event.target;

    if (id === 'image' && files && files.length > 0) {
      const imageFile = files[0];
      setUser((prevUser) => ({ ...prevUser, [id]: imageFile }));
    } else {
      setUser((prevUser) => ({ ...prevUser, [id]: value }));
    }
  };

  return (
    <div className="container-fluid vh-100 d-flex align-items-center justify-content-center">
      <div className="login-container">
        <div className='d-flex col-12'>
          <h2 className="text-center mb-4 Signup">Sign up</h2>
          <div className='col-md-6 col-6 ImagesignUpContainer'>
            <iframe
              title="Lottie Animation"
              className='m-0 p-0 mb-2'
              style={{ width: "20vw", height: "10vh" }}
              src="https://embed.lottiefiles.com/animation/51971"
            ></iframe>
          </div>
        </div>
        <form onSubmit={formik.handleSubmit}>
          <div className="form-group">
            <input
              type="text"
              className="form-control"
              id="name"
              placeholder="Name"
              value={formik.values.name}
              onChange={formik.handleChange}
              onBlur={formik.handleBlur}
            />
            {formik.touched.name && formik.errors.name && (
              <div className="error">{formik.errors.name}</div>
            )}
          </div>
          <div className="form-group">
            <input
              type="email"
              className="form-control"
              id="email"
              placeholder="Email"
              value={formik.values.email}
              onChange={formik.handleChange}
              onBlur={formik.handleBlur}
            />
            {formik.touched.email && formik.errors.email && (
              <div className="error">{formik.errors.email}</div>
            )}
          </div>
          {/* Rest of the form fields */}
          <button type="submit" className="btn btn-primary btn-block">Register</button>
          <h6 className='mt-3'>Already have an Account
            <Link to="/Login">Login</Link></h6>
        </form>
      </div>
    </div>
  );
};

export default SignUp;